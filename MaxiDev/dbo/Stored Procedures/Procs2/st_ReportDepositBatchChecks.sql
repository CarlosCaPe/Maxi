
CREATE PROCEDURE [dbo].[st_ReportDepositBatchChecks]
 (      
	 @StartDate Datetime,      
	 @EndDate Datetime      
 )
       
 AS
 /********************************************************************
<Author></Author>
<app>GeneralServices</app>
<Description>Pestaña Batch que muestra cheques con movimiento positivo y negativo, o cheques pagados en banco, pero sin mostrar los registros de cheques pagados anteriormente 
que fueron rechazados por usuario, solo los movimientos de los rechazos.</Description>

<ChangeLog>
<log Date="23/11/2018" Author="adominguez">Para los tipo de movimiento Debito, presentar los montos en negarivo</log>
<log Date="15/07/2020" Author="bortega">Ticket 2072 Autogenerated Reports - Collection Report. Req:: 00197</log>
<log Date="25/10/2021" Author="jdarellano" Name="#1">Se modifica el procedimiento para muestra de cheques con registro en balance (Ticket 1045).</log>
<log Date="28/10/2021" Author="jdarellano" Name="#2">Se modifica el procedimiento para muestra de cheques con registro en balance, tanto rechazados como cancelados. (Ticket 1045).</log>
<log Date="29/10/2021" Author="jdarellano" Name="#3">Se modifica el procedimiento para muestra de cheques pagados con registro en balance, al igual que rechazados y cancelados, y rechazos de cheques que fueron previamente pagados.(Ticket 1045).</log>
</ChangeLog>

--Exec st_ReportDepositBatchChecks '2015-01-01','2018-12-31'
*********************************************************************/
-- -----------------
SET  TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
SET NOCOUNT ON; 
-- -----------------

BEGIN TRY
	--DECLARE @StartDate DATETIME      
	--DECLARE @EndDate DATETIME      

    --SET @StartDate = '2015-12-03'
    --SET @EndDate = '2015-12-03'

	--Req:: 00197
	SET @StartDate = dbo.RemoveTimeFromDatetime(@StartDate);
	--SET @EndDate =dbo.RemoveTimeFromDatetime(@EndDate+1)      
	DECLARE @HourNow varchar(50);
	SET @HourNow = (SELECT CONVERT(varchar(12), GETDATE(), 114) AS [HH:MI:SS:MMM(24H)]);
		--set @HourNow = '02:00:00.000'
	   
		--if(@HourNow >= '01:10:00' AND @HourNow < '09:00:00')
	IF (@HourNow >= '01:00:00' AND @HourNow < '08:50:00')
	BEGIN
		SET @EndDate =dbo.RemoveTimeFromDatetime(@EndDate);
	END

	ELSE
	BEGIN
		SET @EndDate = dbo.RemoveTimeFromDatetime(@EndDate+1);
	END
  --Req:: 00197  
	
	--#3
	SELECT 
		L.IdAgent,
		[dbo].[ValidateLaboralDay](L.DateStatusChange) AS [Entry],
		B.AgentCode +' '+B.AgentName Agent, 
		L.Amount,
		ISNULL(L.Notes,'') AS Notes,
		L.DateStatusChange AS [Date], 
		CASE 
			WHEN L.IdCheckProcessorBank = 1 THEN 'Wells Fargo Sub Account' 
			WHEN L.IdCheckProcessorBank = 2 THEN 'Southside Bank, 1518801' 
			WHEN L.IdCheckProcessorBank = 3 THEN 'Bank of Texas' 
			WHEN L.IdCheckProcessorBank = 4 THEN 'First Midwest Bank'
			ELSE ''
		END AS BankName,
		'System' AS UserName,   	 	  	    
		'CHECK' AS MoveType,
		'Credit' AS DebitOrCredit
	FROM
	(
		SELECT
			ck.IdAgent,
			Ck.DateStatusChange,
			SUM(ck.Amount) AS Amount,    
			dbo.[fn_GetDetailNumberCheckBachAll] (ck.IdAgent, ck.IdCheckProcessorBank,Ck.DateStatusChange ) AS Notes,  
			ck.IdCheckProcessorBank				  
		FROM dbo.Checks AS ck WITH (NOLOCK)
		INNER JOIN dbo.AgentBalance AS ab WITH (NOLOCK) ON ck.IdCheck = ab.idtransfer AND ab.TypeOfMovement = 'CH'--#1
		--WHERE ck.IdStatus = 30--#1
		--WHERE ck.DateStatusChange > @StartDate--#3
		WHERE ck.IdStatus = 30--#3
			AND ck.DateStatusChange > @StartDate 
			AND ck.DateStatusChange < @EndDate 
		GROUP BY  ck.IdAgent,ck.IdCheckProcessorBank, ck.DateStatusChange
	)L	
	INNER JOIN dbo.Agent AS B WITH (NOLOCK) ON L.IdAgent=B.IdAgent--#3

	UNION

	SELECT 
		L.IdAgent,
		[dbo].[ValidateLaboralDay](L.DateStatusChange) AS [Entry],
		B.AgentCode +' '+B.AgentName Agent, 
		L.Amount,
		ISNULL(L.Notes,'') AS Notes,
		L.DateStatusChange AS [Date], 
		CASE 
			WHEN L.IdCheckProcessorBank = 1 THEN 'Wells Fargo Sub Account' 
			WHEN L.IdCheckProcessorBank = 2 THEN 'Southside Bank, 1518801' 
			WHEN L.IdCheckProcessorBank = 3 THEN 'Bank of Texas' 
			WHEN L.IdCheckProcessorBank = 4 THEN 'First Midwest Bank'
			ELSE ''
		END AS BankName,
		'System' AS UserName,   	 	  	    
		'CHECK' AS MoveType,
		'Credit' AS DebitOrCredit
	FROM
	(
		SELECT
			ck.IdAgent,
			Ck.DateStatusChange,
			SUM(ck.Amount) AS Amount,    
			dbo.[fn_GetDetailNumberCheckBachAll] (ck.IdAgent, ck.IdCheckProcessorBank,Ck.DateStatusChange ) AS Notes,  
			ck.IdCheckProcessorBank				  
		FROM dbo.Checks AS ck WITH (NOLOCK)
		INNER JOIN dbo.AgentBalance AS ab WITH (NOLOCK) ON ck.IdCheck = ab.idtransfer AND ab.TypeOfMovement = 'CH'--#1
		--WHERE ck.IdStatus = 30--#1
		--WHERE ck.DateStatusChange > @StartDate--#3 
		WHERE ck.IdStatus IN (31,22)--#3
			AND ck.DateStatusChange > @StartDate 
			AND ck.DateStatusChange < @EndDate 
			AND NOT EXISTS (SELECT 1 FROM dbo.CheckDetails AS chd WITH (NOLOCK) WHERE ck.IdCheck = chd.IdCheck AND chd.IdStatus = 30)--#3
		GROUP BY  ck.IdAgent,ck.IdCheckProcessorBank, ck.DateStatusChange
	)L	
	INNER JOIN dbo.Agent AS B WITH (NOLOCK) ON L.IdAgent=B.IdAgent
	
	UNION

	SELECT
		ck.IdAgent,
		[dbo].[ValidateLaboralDay](ck.DateStatusChange) as [Entry], 
		B.AgentCode +' '+B.AgentName AS Agent, 
		CASE 
			WHEN ck.Amount > 0 THEN (ck.Amount * -1) 
			ELSE ck.Amount
		END AS Amount, -- se debe mostrar los movimientos Debit como negativos     
		'By Scanner Process, Check Number: '+  ISNULL(CONVERT(varchar, ck.CheckNumber),'-')+ ', Note: '+cd.Note AS Notes,  
		ck.DateStatusChange AS [Date],     
		CASE 
			WHEN IdCheckProcessorBank = 1 THEN 'Wells Fargo Sub Account' 
			WHEN IdCheckProcessorBank = 2 THEN 'Southside Bank, 1518801' 
			WHEN IdCheckProcessorBank = 3 THEN 'Bank of Texas'
			WHEN IdCheckProcessorBank = 4 THEN 'First Midwest Bank'
			ELSE ''
		END AS BankName ,	
		U.UserName,   	 	  	    
		'CHECK' AS MoveType,
		'Debit' AS DebitOrCredit	
	FROM dbo.Checks AS ck WITH (NOLOCK)
	INNER JOIN dbo.AgentBalance AS AB WITH (NOLOCK) ON ck.IdCheck = ab.idtransfer
	INNER JOIN
	(
		SELECT MAX(IdCheckDetail) AS IdCheckDetail, IdCheck
		FROM dbo.CheckDetails WITH (NOLOCK) 
		WHERE IdStatus = 31 
		GROUP BY IdCheck
	)l ON l.IdCheck = ck.IdCheck
	INNER JOIN dbo.CheckDetails AS cd WITH (NOLOCK) ON l.IdCheckDetail = cd.IdCheckDetail
	INNER JOIN dbo.Agent AS B WITH (NOLOCK) ON ck.IdAgent=B.IdAgent   
	INNER JOIN dbo.Users AS U WITH (NOLOCK) ON U.IdUser= cd.EnterByIdUser
	WHERE ck.IdStatus = 31
		AND ab.TypeOfMovement = 'CHRTN'
		AND ck.DateStatusChange > @StartDate 
		AND ck.DateStatusChange < @EndDate

	UNION
	--#2
	SELECT
		ck.IdAgent,
		[dbo].[ValidateLaboralDay](ck.DateStatusChange) as [Entry], 
		B.AgentCode +' '+B.AgentName AS Agent, 
		CASE 
			WHEN ck.Amount > 0 THEN (ck.Amount * -1) 
			ELSE ck.Amount
		END AS Amount, -- se debe mostrar los movimientos Debit como negativos     
		'By Scanner Process, Check Number: '+  ISNULL(CONVERT(varchar, ck.CheckNumber),'-')+ ', Note: '+cd.Note AS Notes,  
		ck.DateStatusChange AS [Date],     
		CASE 
			WHEN IdCheckProcessorBank = 1 THEN 'Wells Fargo Sub Account' 
			WHEN IdCheckProcessorBank = 2 THEN 'Southside Bank, 1518801' 
			WHEN IdCheckProcessorBank = 3 THEN 'Bank of Texas'
			WHEN IdCheckProcessorBank = 4 THEN 'First Midwest Bank'
			ELSE ''
		END AS BankName ,	
		U.UserName,   	 	  	    
		'CHECK' AS MoveType,
		'Debit' AS DebitOrCredit	
	FROM dbo.Checks AS ck WITH (NOLOCK)
	INNER JOIN dbo.AgentBalance AS AB WITH (NOLOCK) ON ck.IdCheck = ab.idtransfer
	INNER JOIN
	(
		SELECT MAX(IdCheckDetail) AS IdCheckDetail, IdCheck
		FROM dbo.CheckDetails WITH (NOLOCK) 
		WHERE IdStatus = 22 
		GROUP BY IdCheck
	)l ON l.IdCheck = ck.IdCheck
	INNER JOIN dbo.CheckDetails AS cd WITH (NOLOCK) ON l.IdCheckDetail = cd.IdCheckDetail
	INNER JOIN dbo.Agent AS B WITH (NOLOCK) ON ck.IdAgent=B.IdAgent   
	INNER JOIN dbo.Users AS U WITH (NOLOCK) ON U.IdUser= cd.EnterByIdUser
	WHERE ck.IdStatus = 22
		AND ab.TypeOfMovement = 'CHRTN'
		AND ck.DateStatusChange > @StartDate 
		AND ck.DateStatusChange < @EndDate--#2
	ORDER BY [Entry],DebitOrCredit;--#1
	--ORDER BY Entry--#1

END TRY

BEGIN CATCH    
	DECLARE @ErrorMessage varchar(max);
    SELECT @ErrorMessage=ERROR_MESSAGE();
    INSERT INTO dbo.ErrorLogForStoreProcedure (StoreProcedure,ErrorDate,ErrorMessage) VALUES ('st_ReportDepositBatchChecks',GETDATE(),@ErrorMessage);
END CATCH