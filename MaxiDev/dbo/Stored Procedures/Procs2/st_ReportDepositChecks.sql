CREATE Procedure [dbo].[st_ReportDepositChecks]      
 (      
	 @StartDate Datetime,      
	 @EndDate Datetime      
 )
       
 AS

 /********************************************************************
<Author>Not Known</Author>
<app>Maxi WinServices CollectionReport</app>
<Description></Description>

<ChangeLog>
<log Date="01/11/2019" Author="jhornedo">Se optimiza la consulta de checknumber #1</log>
<log Date="15/07/2020" Author="bortega">Ticket 2072 Autogenerated Reports - Collection Report. Req:: 00197</log>
</ChangeLog>
********************************************************************/

-- -----------------
 SET  TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
 SET NOCOUNT ON; 
-- -----------------

Begin try
--DECLARE @StartDate DATETIME      
--DECLARE @EndDate DATETIME      

--    SET @StartDate = '2016-06-13'
--    SET @EndDate = '2016-06-14'

    Declare @Tomorroy datetime = DateAdd(day, 1, getDate())   
 
		DECLARE  @TempChecks Table  
		(
		Entry DATETIME,
		Agent NVARCHAR(MAX),
		Amount MONEY,
		Notes NVARCHAR(MAX),
		Date DATETIME,
		BankName NVARCHAR(100),
		UserName NVARCHAR(100),
		MoveType NVARCHAR(100),
		DebitOrCredit NVARCHAR(100),
		OrderReport NVARCHAR (5)
		) 


       --Req:: 00197
		SET @StartDate = dbo.RemoveTimeFromDatetime(@StartDate)      
		--SET @EndDate =dbo.RemoveTimeFromDatetime(@EndDate+1)      
		DECLARE @HourNow varchar(50)
		set @HourNow = (select CONVERT(VARCHAR(12), GETDATE(), 114) AS [HH:MI:SS:MMM(24H)])
		--set @HourNow = '02:00:00.000'
	   
		if(@HourNow >= '01:10:00' AND @HourNow < '09:00:00')
			BEGIN
				SET @EndDate =dbo.RemoveTimeFromDatetime(@EndDate) 
		   END
		ELSE
			BEGIN
				SET @EndDate =dbo.RemoveTimeFromDatetime(@EndDate+1) 
			END
		--Req:: 00197

		-------------------begin #1---------------------------------
		/*
		 SELECT
			 MAX(ck.DateOfMovement) as Entry, 
			 MAX(B.AgentCode) +' '+MAX(B.AgentName) Agent, 
			 SUM(ck.Amount) Amount,    
			 --dbo.[fn_GetDetailNumberCheckBach] (ck.BachCode, IdCheckProcessorBank)  Notes,  
			 	 'By Scanner Process. Check Number: '+		
			 (
				   SELECT ' '+ convert(varchar, CheckNumber) +','
					 FROM Checks ck2 (nolock)
					WHERE ck2.IdStatus = 30
					  AND ck2.BachCode IS NOT NULL
					  AND ck2.BachCode =  ck.BachCode
					  and ck2.IdCheckProcessorBank=ck.IdCheckProcessorBank
					  FOR XML PATH('') 
				  )   Notes,
			 MAX(ck.DateStatusChange) as Date,     			   
			 case 
				when IdCheckProcessorBank=1 then'Wells Fargo Sub Account' 
				when IdCheckProcessorBank=2 then'Southside Bank, 1518801' 
				when IdCheckProcessorBank=3 then'Bank of Texas' 
				when IdCheckProcessorBank=4 then'First Midwest Bank'
				else ''
			 end BankName ,	
			 MAX(U.UserName) UserName,   	 	  	    
			 'CHECK' as MoveType,
			 'Credit'	DebitOrCredit,
			  'a'  	  a into #tmp
	    FROM Checks ck (nolock)
	   --INNER JOIN AgentBalance AB 
	   --   ON ck.IdCheck = ab.idtransfer
	   INNER JOIN Agent B (nolock)
	      ON ck.IdAgent=B.IdAgent   
	   INNER JOIN users U (nolock)
	      ON U.IdUser= ck.EnteredByIdUser

	   WHERE ck.IdStatus = 30
	     AND ck.BachCode IS NOT NULL
	     --AND ab.TypeOfMovement = 'CH'
	     AND ck.DateStatusChange > @StartDate 
	     AND ck.DateStatusChange < @EndDate  

	   GROUP BY BachCode, IdCheckProcessorBank
	   */

	   ;WITH cte_Datos AS (

			SELECT
			ck.BachCode,
			ck.IdCheckProcessorBank,
			 MAX(ck.DateOfMovement) as Entry, 
			 MAX(B.AgentCode) +' '+MAX(B.AgentName) Agent, 
			 SUM(ck.Amount) Amount,    
			 --dbo.[fn_GetDetailNumberCheckBach] (ck.BachCode, IdCheckProcessorBank)  Notes,   	 
			 MAX(ck.DateStatusChange) as Date,     			   
			 case 
				when IdCheckProcessorBank=1 then'Wells Fargo Sub Account' 
				when IdCheckProcessorBank=2 then'Southside Bank, 1518801' 
				when IdCheckProcessorBank=3 then'Bank of Texas' 
				when IdCheckProcessorBank=4 then'First Midwest Bank'
				else ''
			 end BankName ,	
			 MAX(U.UserName) UserName,   	 	  	    
			 'CHECK' as MoveType,
			 'Credit'	DebitOrCredit,
			  'a'  	  a
	    FROM Checks ck (nolock)
	   --INNER JOIN AgentBalance AB 
	   --   ON ck.IdCheck = ab.idtransfer
	   INNER JOIN Agent B (nolock)
	      ON ck.IdAgent=B.IdAgent   
	   INNER JOIN users U (nolock)
	      ON U.IdUser= ck.EnteredByIdUser

	   WHERE ck.IdStatus = 30
	     AND ck.BachCode IS NOT NULL
	     --AND ab.TypeOfMovement = 'CH'
	     AND ck.DateStatusChange > @StartDate 
	     AND ck.DateStatusChange < @EndDate  

	   GROUP BY BachCode, IdCheckProcessorBank
	   )

	   SELECT 
				Entry, 
				Agent,
				Amount,
				'By Scanner Process. Check Number: '+		
			 (
				   SELECT ' '+ convert(varchar, CheckNumber) +','
					 FROM Checks ck2 (nolock)
					WHERE --ck2.IdStatus = 30
					  --AND ck2.BachCode IS NOT NULL
					  --AND 
					  ck2.BachCode =  cte_Datos.BachCode
					  and ck2.IdCheckProcessorBank=cte_Datos.IdCheckProcessorBank
					  ORDER BY CheckNumber desc
					  FOR XML PATH('') 
				  )  Notes,
				  Date,
				  BankName,
				  UserName,
				  MoveType,
				  DebitOrCredit,
				  a
				  INTO #tmp
		FROM cte_Datos

		------------end #1--------------------

		INSERT INTO @TempChecks 
		(
		Entry,
		Agent,
		Amount,
		Notes,
		Date,
		BankName,
		UserName,
		MoveType,
		DebitOrCredit,
		OrderReport
        )
       
    	  SELECT
			 ck.DateOfMovement as Entry, 
			 B.AgentCode +' '+B.AgentName Agent, 
			 ck.Amount Amount,    
			 'By Scanner Process, Check Number: '+  isnull(convert(varchar, ck.CheckNumber),'-')  Notes,  
			 ck.DateStatusChange as Date,     
			 case 
				when IdCheckProcessorBank=1 then'Wells Fargo Sub Account' 
				when IdCheckProcessorBank=2 then'Southside Bank, 1518801' 
				when IdCheckProcessorBank=3 then'Bank of Texas' 
				else ''
			 end BankName ,	
			 U.UserName,   	 	  	    
			 'CHECK' as MoveType,
			 'Credit' DebitOrCredit,
			 'a'	
	    FROM Checks ck (nolock)
	   --INNER JOIN AgentBalance AB 
	   --   ON ck.IdCheck = ab.idtransfer
	   INNER JOIN Agent B (nolock)
	      ON ck.IdAgent=B.IdAgent   
	   INNER JOIN users U (nolock)
	      ON U.IdUser= ck.EnteredByIdUser

	   WHERE ck.IdStatus = 30
	     --AND ab.TypeOfMovement = 'CH'
		 AND ck.BachCode is null
	     AND ck.DateStatusChange > @StartDate 
	     AND ck.DateStatusChange < @EndDate  

----------------------------------Cheques cargados en bach - pagados

       UNION	

	   select Entry,Agent,Amount, SUBSTRING(Notes, 0, LEN(Notes)) Notes ,Date,BankName,UserName,MoveType,DebitOrCredit,a from #tmp
/*
	  SELECT
			 MAX(ck.DateOfMovement) as Entry, 
			 MAX(B.AgentCode) +' '+MAX(B.AgentName) Agent, 
			 SUM(ck.Amount) Amount,    
			 dbo.[fn_GetDetailNumberCheckBach] (ck.BachCode, IdCheckProcessorBank)  Notes,  
			 MAX(ck.DateStatusChange) as Date,     
			 case 
				when IdCheckProcessorBank=1 then'Wells Fargo Sub Account' 
				when IdCheckProcessorBank=2 then'Southside Bank, 1518801' 
				when IdCheckProcessorBank=3 then'Bank of Texas' 
				else ''
			 end BankName ,	
			 MAX(U.UserName),   	 	  	    
			 'CHECK' as MoveType,
			 'Credit'	DebitOrCredit,
			  'a'  	  
	    FROM Checks ck 
	   --INNER JOIN AgentBalance AB 
	   --   ON ck.IdCheck = ab.idtransfer
	   INNER JOIN Agent B 
	      ON ck.IdAgent=B.IdAgent   
	   INNER JOIN users U 
	      ON U.IdUser= ck.EnteredByIdUser

	   WHERE ck.IdStatus = 30
	     AND ck.BachCode IS NOT NULL
	     --AND ab.TypeOfMovement = 'CH'
	     AND ck.DateStatusChange > @StartDate 
	     AND ck.DateStatusChange < @EndDate  

	   GROUP BY BachCode, IdCheckProcessorBank
*/

   ---------------------------------------
   ----------------Rechazados-------------
   UNION

     SELECT
			 ck.DateOfMovement as Entry, 
			 B.AgentCode +' '+B.AgentName Agent, 
			 ck.Amount Amount,    
			'By Scanner Process, Check Number: '+  isnull(convert(varchar, ck.CheckNumber),'-')+ ', Note: '+cd.Note  Notes,  
			 ck.DateStatusChange as Date,     
			 case 
				when IdCheckProcessorBank=1 then'Wells Fargo Sub Account' 
				when IdCheckProcessorBank=2 then'Southside Bank, 1518801' 
				when IdCheckProcessorBank=3 then'Bank of Texas' 
				else ''
			 end BankName ,	
			 U.UserName,   	 	  	    
			 'CHECK' as MoveType,
			 'Debit'  DebitOrCredit,
			 'c'	
	    FROM Checks ck (nolock)
	   INNER JOIN AgentBalance AB (nolock)
	      ON ck.IdCheck = ab.idtransfer
      INNER JOIN
		(
			select max(IdCheckDetail) IdCheckDetail, IdCheck
			from CheckDetails (nolock) where IdStatus = 31 group by IdCheck
		)l ON l.IdCheck = ck.IdCheck
       INNER JOIN CheckDetails cd (nolock) ON l.IdCheckDetail = cd.IdCheckDetail
	   INNER JOIN Agent B (nolock)
	      ON ck.IdAgent=B.IdAgent   
	   INNER JOIN users U (nolock)
	      ON U.IdUser= ck.EnteredByIdUser

	   WHERE ck.IdStatus = 31
	     AND ab.TypeOfMovement = 'CHRTN'
		 --AND ck.BachCode is null
	     AND ck.DateStatusChange > @StartDate 
	     AND ck.DateStatusChange < @EndDate  



		 
		INSERT INTO @TempChecks 
		(
		Entry,
		Agent,
		Amount,
		Notes,
		Date,
		BankName,
		UserName,
		MoveType,
		DebitOrCredit,
		OrderReport
        )
       
		SELECT NULL, Agent, sum(Amount), 'By Scanner Process, ' + BankName + ', Hour: ' + CONVERT(VARCHAR, Date, 108), Date, BankName, 'System', 'CHECK', '', 'a'  
		FROM  @TempChecks 
			WHERE DebitOrCredit = 'Credit' 
			group by Date, Agent, BankName
	


	SELECT [dbo].[ValidateLaboralDay](Date) as Entry, Agent, Amount, Notes, Entry as [Date], BankName, UserName, MoveType,	DebitOrCredit, OrderReport 
	FROM @TempChecks 
	ORDER BY Agent, BankName, OrderReport, Date, isnull( Entry, @tomorroy)

End try
Begin Catch    
DECLARE @ErrorMessage varchar(max)                                                                 
    Select @ErrorMessage=ERROR_MESSAGE()   
    Insert into ErrorLogForStoreProcedure (StoreProcedure,ErrorDate,ErrorMessage)Values('st_ReportDepositChecks',Getdate(),@ErrorMessage)
End catch

